from CFG_Generator import Generate_CFG_Grammar as Generate

"""Given a Context Free Grammar G = (V, T, P, S) and a string w, where:

    V is a finite set of variables or non-terminal symbols,
    T is a finite set of terminal symbols,
    P is a finite set of productions,
    S is the start symbol, a distinct element of V"""

"""Chomsky Normal Form: 
A Context Free Grammar G is in Chomsky Normal Form (CNF) if each production within G is of the form:

    A –> BC,        ( with at most two non-terminal symbols on the RHS )
    A –> a,         ( one terminal symbol on the RHS) """

"""Function to perform the CYK Algorithm"""
def CYK(w):
   """Cocke-Younger-Kasami Algorithm"""
   """The algorithm requires the Grammar G to be in Chomsky Normal Form (CNF)."""

   """For a string of length N, construct a table T of size N x N. 
   Each cell in the table T[i, j] is the set of all constituents that can produce the substring spanning from position i to j. 
   The process involves filling the table with the solutions to the subproblems encountered in the bottom-up parsing process. 
   Therefore, cells will be filled from left to right and bottom to top."""

   R = Generate()
   n = len(w)
   
   # Initialize the table
   T = [[set([]) for j in range(n)] for i in range(n)]

   # Filling in the table
   for j in range(0, n):

      # Iterate over the rules
      for lhs, rule in R.items():
         for rhs in rule:
               
               # If a terminal is found
               if len(rhs) == 1 and \
               rhs[0] == w[j]:
                  T[j][j].add(lhs)

      for i in range(j, -1, -1):  
            
         # Iterate over the range i to j + 1  
         for k in range(i, j + 1):    

               # Iterate over the rules
               for lhs, rule in R.items():
                  for rhs in rule:
                        
                     # If a terminal is found
                     if len(rhs) == 2 and \
                     rhs[0] in T[i][k] and \
                     rhs[1] in T[k + 1][j]:
                           T[i][j].add(lhs)
   
   # If word can be formed by rules
   # of given grammar
   if len(T[0][n-1]) != 0:
      s = ""
      for c in w:
         s += c
      print("\nThe Given String w = " +  s + " is able to be generated by our given CFG in CNF\n\n")
   else:
      s = ""
      for c in w:
         s += c
      print("\nFalse,The given String w =  " +  s + " CANNOT be generated by our given CFG in CNF\n\n")